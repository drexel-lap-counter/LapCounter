Packages that need documentation:

- backend (3 files)
- backend.ble (14 files)
- backend.Database.* (16 files)
- backend.lapcounter (7 files) (just needs minor updates)
- frontend (17 files)
- frontend.navigationbar (1 file)

I propose that we split the work into three branches:

1. docs-frontend (Patrick)
    IMPORTANT: whoever does this should sync with master as bug-feature
    branches get merged in to make sure we don't miss a spot

    - frontend
    - frontend.navigationbar

2. docs-backend (Royce, Peter)

    - backend
    - backend.ble
    - backend.lapcounter

3. docs-database (Jon)

    - backend.Database.*

Furthermore, here are some guidelines to follow: -------------------------

Given the lack of time we have, I propose the following

Setting up branches:

- DO NOT MODIFY THIS FILE. I'll update it if needed and remove it when we're 
    done
- new branches should branch off `final-docs`


Writing documentation:

- We are NOT documenting the unit tests, that would be too time-consuming
- Document each class/interface and methods.
- Public and protected methods/fields are most important
- I highly recommend documenting the private methods too, but see how time
    allows
- You can skip @Override methods UNLESS the overridden method does
    something unexpected
- For examples of javadoc format, look through the stuff in backend.lapcounter
    Remember that javadoc comments begin with /** (two asterisks) and end with 
    */

Wrapping up a package documentation branch:

When you're finished with one of the `docs-XXX` branches, do the following:

1. Run the code to make sure nothing is broken by a mismatched /** */ by
    accident
2. Checkout `final-docs`:

```
git checkout `final-docs`
```

3. Pull any changes, merge the feature branch locally, and push 

```
git pull
git merge `docs-XXX` # Insert feature name here
git push
```

Once all 3 doc branches are merged and pushed, I'll look though everything
one last time then create a PR for `final-docs` into master

- Peter
