package edu.drexel.lapcounter.lapcounter.backend.Database.Workout;

import android.arch.persistence.room.ColumnInfo;
import android.arch.persistence.room.Entity;
import android.arch.persistence.room.ForeignKey;
import android.arch.persistence.room.PrimaryKey;
import android.arch.persistence.room.TypeConverters;
import android.support.annotation.NonNull;
import java.util.Date;
import edu.drexel.lapcounter.lapcounter.backend.Database.Device.Device;
import edu.drexel.lapcounter.lapcounter.backend.Database.Units.Units;
import edu.drexel.lapcounter.lapcounter.backend.TimestampConverter;
import static android.arch.persistence.room.ForeignKey.SET_NULL;

/**
 * Workout Object used for storing and displaying completed workouts.
 * Class Represents a workout that was completed, is anentity within table workouts.<p>
 * Has the following fields:<p>
 * ID  (Primary Key): ID of the workout,<p>
 * Start Date:        The starting date and time of the workout,<p>
 * End Date:          The ending date and time of the workout,<p>
 * Pool Length:       Length of the pool the workout was done it,<p>
 * Total Distance Traveled:  Total distance that the use swam,<p>
 * Pool Units:        Units that the pool length is in,<p>
 * Laps:              Number of laps completed for the workout,<p>
 * Device Mac:        MAC Address of the device used to conduct the workout<p>
 * Foreign Keys:  Device_Mac from Devices mac_address, on delete SET_NULL,<p>
 *                Pool_Units from Units Unit_Name, on delete SET_NULL,<p>
 */
@Entity(tableName = "workouts",
        foreignKeys = {@ForeignKey(entity= Device.class,
                                   parentColumns = "mac_address",
                                    childColumns = "Device_Mac",
                                    onDelete = SET_NULL),
                       @ForeignKey(entity = Units.class,
                                    parentColumns = "Unit_Name",
                                    childColumns = "Pool_Units",
                                    onDelete = SET_NULL)})
public class Workout {
    /**
     * ID of workout.
     * Primary Key.  If this is not specified on insert, a id will be autogenerated from table.
     */
    @ColumnInfo(name = "ID")
    @PrimaryKey(autoGenerate = true)
    public int id;

    /**
     * Start Date and time of the workout, stored in unix timestamp
     * Conversions to and from unix timestamp and Date done by TimestampConverter
     * @see TimestampConverter
     */
    @ColumnInfo(name ="Start_Date")
    @NonNull
    @TypeConverters({TimestampConverter.class})
    private Date mStartDate;

    /**
     * End Date and time of the workout, stored in unix timestamp
     * Conversions to and from unix timestamp and Date done by TimestampConverter
     * @see TimestampConverter
     */
    @ColumnInfo(name ="End_Date")
    @TypeConverters({TimestampConverter.class})
    private Date mEndDate;

    /**
     * Length of pool that workout was done in.
     * Normal sizes are 25 and 50, but there can be custom values if user enters it.
     * Units are specified by Pool Units
     */
    @ColumnInfo(name = "Pool_length")
    private int mPoolLength;

    /**
     * Total Distance Traveled by the swimmer for this workout.
     * Calculated as Laps * Pool Length
     * Units are specified by Pool Units
     */
    @ColumnInfo(name = "Total_Distance_Traveled")
    private int mTotalDistanceTraveled;

    /**
     * Units that the pool size and total distance were in.
     * Either Meters or Yards
     */
    @ColumnInfo(name="Pool_Units")
    private String mPoolUnits;

    /**
     * Number of laps done for this workout.
     */
    @ColumnInfo(name = "Laps")
    private int mLaps;

    /**
     * Mac address of the device that was used for this workout.
     */
    @ColumnInfo(name="Device_Mac")
    private String mDeviceMAC;

    //
    //GETTERS
    //


    /**
     * Getter for id.
     * returns the ID of the workout
     * @return int ID of workout
     */
    public int getID(){
        return id;
    }

    /**
     * Getter for Start Date.
     * returns the start date of the workout
     * @return Date date and time of workout
     */
    public Date getStartDate()
    {
        return mStartDate;
    }

    /**
     * Getter for End Date.
     * returns the start date of the workout
     * @return Date date and time of workout
     */
    public Date getEndDate() {
        return mEndDate;
    }

    /**
     * Getter for Total Distance Traveled.
     * returns the total distance swam for the workout
     * @return int distance of workout
     */
    public int getTotalDistanceTraveled(){
        return mTotalDistanceTraveled;
    }

    /**
     * Getter for Pool Length.
     * returns the pool length of the pool this workout was done in.
     * @return int distance of pool.
     */
    public int getPoolLength(){
        return mPoolLength;
    }

    /**
     * Getter for Pool Units.
     * returns the string value of the units for total distance and pool length
     * @return String value of Units (Meters or Yards)
     */
    public String getPoolUnits()
    {
        return mPoolUnits;
    }

    /**
     * Getter for Laps.
     * returns the number of laps completed for this workout
     * @return int value of laps completed.
     */
    public int getLaps()
    {
        return mLaps;
    }

    /**
     * Getter for DeviceMac.
     * returns the string mac address for the device that was used to conduct workout.
     * @return string value of mac address.
     */
    public String getDeviceMAC()
    {
        return mDeviceMAC;
    }


    //
    //SETTERS
    //

    /**
     * Setter for ID.
     * Sets ID of workout
     * @param id int value of id to set.
     */
    public void setID(int id){
        this.id = id;
    }

    /**
     * Setter for Start Date.
     * Sets Start date of workout.
     * @param startDateTime Date object that is the start date and time of workout
     */
    public void setStartDate(Date startDateTime) {
        this.mStartDate = startDateTime;
    }

    /**
     * Setter for End Date.
     * Sets Start date of workout.
     * @param endDateTime Date object that is the end date and time of workout
     */
    public void setEndDate(Date endDateTime) {
        this.mEndDate = endDateTime;
    }

    /**
     * Setter for Total Distance Traveled.
     * sets total distance value.
     * @param totalDistanceTraveled int value of the total distance swam.
     */
    public void setTotalDistanceTraveled(int totalDistanceTraveled){
        this.mTotalDistanceTraveled = totalDistanceTraveled;
    }

    /**
     * Setter for Pool Length.
     * sets length of pool
     * @param poolLength int value of pool length
     */
    public void setPoolLength(int poolLength){
        this.mPoolLength = poolLength;
    }

    /**
     * Setter for PoolUnits.
     * sets pool units.
     * @param poolUnits string value of units used for pool length and total distance traveled.
     */
    public void setPoolUnits(String poolUnits)
    {
        this.mPoolUnits = poolUnits;
    }

    /**
     * Setter for Laps.
     * sets the number of laps done for workout.
     * @param laps int value of laps done.
     */
    public void setLaps(int laps)
    {
        this.mLaps = laps;
    }

    /**
     * Setter for DeviceMac.
     * sets the mac address for device that did workout.
     * @param device_mac String value of devices mac address
     */
    public void setDeviceMAC(String device_mac)
    {
        this.mDeviceMAC = device_mac;
    }

    /**
     * Overridden Equals operator to compare equality of workouts.
     * Returns true if all values equal each other.
     * @param o Object to check equality on.
     * @return boolean value of if the two objects are equal.
     */
    @Override
    public boolean equals(Object o)
    {
        if(o == this)
        {
            return true;
        }

        if(!(o instanceof Workout))
        {
            return false;
        }
        Workout w = (Workout) o;
        return ((w.getDeviceMAC()==null && this.mDeviceMAC==null) || w.getDeviceMAC().equals(this.mDeviceMAC)) &&
                w.getPoolUnits().equals(this.mPoolUnits) &&
                w.getEndDate().equals(this.mEndDate) &&
                w.getStartDate().equals(this.mStartDate) &&
                w.getID() == this.getID() &&
                w.getLaps() == this.getLaps() &&
                w.getPoolLength() == this.getPoolLength() &&
                w.getTotalDistanceTraveled() == this.getTotalDistanceTraveled();
    }


}
